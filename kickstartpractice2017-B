#include <iostream>
#include <sstream>
#include <fstream>
#include <cstdio>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <stack>
#include <deque>
#include <queue>
#include <utility>
using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); i++)
#define DOW(i,a,b) for(int i = (a); i >= (b); i--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; ++i)
#define FORI(it, x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)
#define RESET(c,val) memset(c,val,sizeof(c))

#define ALL(x) x.begin(), x.end()
#define UNIQUE(c) (c).resize(unique(ALL(c)) - (c).begin())

#define sz(a) int(a.size())
#define pb push_back
#define mp make_pair
#define fi first
#define se second

// bitmask
#define isOn(S, j) (S & (1 << j))
#define setBit(S, j) (S |= (1 << j))
#define clearBit(S, j) (S &= ~(1 << j))
#define toggleBit(S, j) (S ^= (1 << j))
#define lowBit(S) (S & (-S))
#define setAll(S, n) (S = (1 << n) - 1)

// other manipulation
#define modulo(S, N) ((S) & (N - 1)) // return S % N, where N = 2^k
#define isPowerOfTwo(S) (!(S & (S - 1))
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
#define turnOffLastBit(S) ((S) & (S-1))
#define turnOnLastZero(S) ((S) | (S+1))
#define turnOffLastConsecutiveBits(S) ((S) & (S + 1))
#define turnOnLastConsecutiveZeroes(S) ((S) & (S - 1))


typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;

/*---------------------------*/

double f[2002][2002];
int main() {
    
    freopen("/Users/apple/Downloads/inp.txt", "r", stdin);
    freopen("/Users/apple/Downloads/out.txt", "w", stdout);
    
    int t; cin >> t;
    for(int k = 1; k <= t; k++) {
        int n, m; cin >> n >> m;
        
        for(int i = 0; i <= n; i++) {
            for(int j = 0; j <= m; j++) {
                if (i == 0 && j == 0) f[i][j] = 1.0;
                else if (i <= j) f[i][j] = 0.0;
                else {
                    if (i > 0) f[i][j] = f[i-1][j] * (n-i+1) / (m+n-i+1-j);
                    if (j > 0) f[i][j] += f[i][j-1] * (m-j+1) / (m+n-j+1-i);
                }
            }
        }
        
        printf("Case #%d: %.8f", k, f[n][m]);
        if (k < t) cout << '\n';
    }

    return 0;
}














